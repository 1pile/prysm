diff --git a/eth/v1alpha1/attestation.pb.go b/eth/v1alpha1/attestation.pb.go
index c233f54..2baa8ff 100644
--- a/eth/v1alpha1/attestation.pb.go
+++ b/eth/v1alpha1/attestation.pb.go
@@ -23,8 +23,7 @@ const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
 type Attestation struct {
 	AggregationBits      []byte           `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3" json:"aggregation_bits,omitempty"`
 	Data                 *AttestationData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
-	CustodyBits          []byte           `protobuf:"bytes,3,opt,name=custody_bits,json=custodyBits,proto3" json:"custody_bits,omitempty"`
-	Signature            []byte           `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
+	Signature            []byte           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
 	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
 	XXX_unrecognized     []byte           `json:"-"`
 	XXX_sizecache        int32            `json:"-"`
@@ -69,13 +68,6 @@ func (m *Attestation) GetData() *AttestationData {
 	return nil
 }
 
-func (m *Attestation) GetCustodyBits() []byte {
-	if m != nil {
-		return m.CustodyBits
-	}
-	return nil
-}
-
 func (m *Attestation) GetSignature() []byte {
 	if m != nil {
 		return m.Signature
@@ -282,35 +274,34 @@ func init() {
 func init() { proto.RegisterFile("eth/v1alpha1/attestation.proto", fileDescriptor_7894c78397fc93a1) }
 
 var fileDescriptor_7894c78397fc93a1 = []byte{
-	// 471 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
-	0x10, 0x86, 0xe5, 0xe2, 0x54, 0xcd, 0xb8, 0x22, 0x65, 0x45, 0xa5, 0x20, 0x10, 0x6d, 0x73, 0x80,
-	0xc2, 0xc1, 0x51, 0x8b, 0x54, 0x09, 0x38, 0x91, 0x92, 0x03, 0xb7, 0xca, 0x47, 0x54, 0x29, 0x5a,
-	0xdb, 0x23, 0xef, 0x2a, 0xb6, 0xd7, 0xda, 0x1d, 0x23, 0xfa, 0x24, 0x9c, 0x78, 0x01, 0xee, 0xbc,
-	0x04, 0x4f, 0xc3, 0x23, 0xa0, 0x1d, 0x3b, 0x89, 0x85, 0x8a, 0xc4, 0x6d, 0xe7, 0x9b, 0x9d, 0x7f,
-	0xfe, 0xf1, 0x78, 0xe1, 0x39, 0x92, 0x9a, 0x7f, 0xb9, 0x90, 0x65, 0xa3, 0xe4, 0xc5, 0x5c, 0x12,
-	0xa1, 0x23, 0x49, 0xda, 0xd4, 0x71, 0x63, 0x0d, 0x19, 0x71, 0x8c, 0xa4, 0xd0, 0x62, 0x5b, 0xc5,
-	0x48, 0x2a, 0xde, 0x5c, 0x9c, 0xfd, 0x0c, 0x20, 0xfa, 0xb0, 0xbb, 0x2c, 0x5e, 0xc1, 0x91, 0x2c,
-	0x0a, 0x8b, 0x05, 0x87, 0xab, 0x54, 0x93, 0x9b, 0x06, 0xa7, 0xc1, 0xf9, 0x61, 0x32, 0x19, 0xf0,
-	0x85, 0x26, 0x27, 0xde, 0x41, 0x98, 0x4b, 0x92, 0xd3, 0xbd, 0xd3, 0xe0, 0x3c, 0xba, 0x7c, 0x11,
-	0xdf, 0xdb, 0x20, 0x1e, 0x88, 0x7f, 0x94, 0x24, 0x13, 0xae, 0x11, 0x67, 0x70, 0x98, 0xb5, 0x8e,
-	0x4c, 0x7e, 0xd7, 0xb5, 0x78, 0xc0, 0x2d, 0xa2, 0x9e, 0xb1, 0xfc, 0x33, 0x18, 0x3b, 0x5d, 0xd4,
-	0x92, 0x5a, 0x8b, 0xd3, 0x90, 0xf3, 0x3b, 0x30, 0xfb, 0x1d, 0xc0, 0xe4, 0x2f, 0x69, 0x21, 0x20,
-	0x74, 0xa5, 0x21, 0xf6, 0x1b, 0x26, 0x7c, 0x16, 0x2f, 0x61, 0x92, 0x99, 0xaa, 0xd2, 0x44, 0x88,
-	0x2b, 0x5d, 0xe7, 0xf8, 0x95, 0xfd, 0x86, 0xc9, 0xc3, 0x2d, 0xfe, 0xe4, 0xa9, 0x78, 0x0d, 0x8f,
-	0x52, 0x94, 0x99, 0x9f, 0xb9, 0x34, 0xd9, 0x7a, 0x65, 0x8d, 0xa1, 0xde, 0xd6, 0xa4, 0x4b, 0x2c,
-	0x3c, 0x4f, 0x8c, 0x21, 0xf1, 0x16, 0xf6, 0x9d, 0x69, 0x6d, 0xd6, 0xf9, 0x8a, 0x2e, 0xcf, 0xfe,
-	0x31, 0xfb, 0xb5, 0xc2, 0x6c, 0xdd, 0x18, 0x5d, 0x53, 0xd2, 0x17, 0xf8, 0x52, 0x92, 0xb6, 0x40,
-	0x9a, 0x8e, 0xfe, 0xbb, 0xb4, 0x2b, 0x98, 0x7d, 0x0f, 0x60, 0x7c, 0x6d, 0x8d, 0x73, 0xa5, 0xae,
-	0xd7, 0xe2, 0x31, 0x8c, 0x9c, 0x92, 0x36, 0xef, 0xa7, 0xed, 0x02, 0x71, 0x02, 0x51, 0x23, 0x2d,
-	0xd6, 0xd4, 0xf9, 0xdf, 0x63, 0xff, 0xd0, 0x21, 0xb6, 0x7e, 0x02, 0x91, 0x23, 0x69, 0x69, 0x85,
-	0x8d, 0xc9, 0x14, 0x0f, 0x18, 0x26, 0xc0, 0x68, 0xe9, 0x89, 0x78, 0x0a, 0x63, 0xac, 0xf3, 0x3e,
-	0x1d, 0x72, 0xfa, 0x00, 0xeb, 0x7c, 0x9b, 0xf4, 0xeb, 0xeb, 0xc4, 0x47, 0x2c, 0x7e, 0xe0, 0x81,
-	0x97, 0x9e, 0x5d, 0x01, 0xec, 0x5c, 0x7b, 0x7f, 0x9d, 0x46, 0xef, 0x8f, 0x03, 0xbf, 0xa2, 0x81,
-	0x31, 0x3e, 0x2f, 0xbe, 0x05, 0xf0, 0xc4, 0xd8, 0xe2, 0xfe, 0x0f, 0xb1, 0x38, 0x1a, 0x6c, 0xf9,
-	0xc6, 0xff, 0xc9, 0x37, 0xc1, 0xe7, 0xab, 0x42, 0x93, 0x6a, 0xd3, 0x38, 0x33, 0xd5, 0xbc, 0xb1,
-	0x77, 0xae, 0x92, 0xa4, 0xb3, 0x52, 0xa6, 0x6e, 0xbe, 0xd1, 0x90, 0x8d, 0xe6, 0x60, 0xfb, 0x22,
-	0xde, 0x23, 0xa9, 0x1f, 0x7b, 0xc7, 0xcb, 0x4d, 0x8f, 0xe5, 0xa0, 0xc7, 0xaf, 0x1d, 0xbf, 0x5d,
-	0x92, 0xba, 0xdd, 0xf0, 0x74, 0x9f, 0x9f, 0xce, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7b,
-	0x2d, 0x22, 0x51, 0x5c, 0x03, 0x00, 0x00,
+	// 455 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8a, 0xd4, 0x40,
+	0x10, 0x86, 0xc9, 0x98, 0x59, 0x76, 0x6a, 0xc4, 0x59, 0x1b, 0x17, 0x22, 0x8a, 0xbb, 0xce, 0x41,
+	0x57, 0x0f, 0x19, 0x56, 0x61, 0x41, 0x3d, 0x39, 0xeb, 0x1c, 0xbc, 0x2d, 0x39, 0xca, 0xc2, 0x50,
+	0x49, 0x8a, 0x74, 0x33, 0x49, 0x3a, 0x74, 0xd7, 0x88, 0xbe, 0x86, 0x17, 0x4f, 0xbe, 0x80, 0x8f,
+	0xe2, 0xd3, 0xf8, 0x08, 0xd2, 0x9d, 0xcc, 0x24, 0xc8, 0x08, 0xde, 0xba, 0xbe, 0xea, 0xfa, 0xeb,
+	0xaf, 0x54, 0x07, 0x9e, 0x10, 0xcb, 0xc5, 0xe7, 0x4b, 0x2c, 0x1b, 0x89, 0x97, 0x0b, 0x64, 0x26,
+	0xcb, 0xc8, 0x4a, 0xd7, 0x71, 0x63, 0x34, 0x6b, 0x71, 0x4a, 0x2c, 0xc9, 0xd0, 0xb6, 0x8a, 0x89,
+	0x65, 0xbc, 0xbb, 0x38, 0xff, 0x16, 0xc0, 0xf4, 0x7d, 0x7f, 0x59, 0xbc, 0x80, 0x13, 0x2c, 0x0a,
+	0x43, 0x85, 0x0f, 0xd7, 0xa9, 0x62, 0x1b, 0x05, 0xe7, 0xc1, 0xc5, 0xdd, 0x64, 0x36, 0xe0, 0x4b,
+	0xc5, 0x56, 0xbc, 0x85, 0x30, 0x47, 0xc6, 0x68, 0x74, 0x1e, 0x5c, 0x4c, 0x5f, 0x3d, 0x8b, 0x0f,
+	0x36, 0x88, 0x07, 0xe2, 0x1f, 0x90, 0x31, 0xf1, 0x35, 0xe2, 0x31, 0x4c, 0xac, 0x2a, 0x6a, 0xe4,
+	0xad, 0xa1, 0xe8, 0x8e, 0xd7, 0xef, 0xc1, 0xfc, 0x77, 0x00, 0xb3, 0xbf, 0xea, 0x84, 0x80, 0xd0,
+	0x96, 0x9a, 0xbd, 0x99, 0x30, 0xf1, 0x67, 0xf1, 0x1c, 0x66, 0x99, 0xae, 0x2a, 0xc5, 0x4c, 0xb4,
+	0x56, 0x75, 0x4e, 0x5f, 0xbc, 0x99, 0x30, 0xb9, 0xb7, 0xc7, 0x1f, 0x1d, 0x15, 0x2f, 0xe1, 0x7e,
+	0x4a, 0x98, 0xb9, 0x81, 0x4a, 0x9d, 0x6d, 0xd6, 0x46, 0x6b, 0xee, 0xda, 0xce, 0xda, 0xc4, 0xd2,
+	0xf1, 0x44, 0x6b, 0x16, 0x6f, 0xe0, 0xc8, 0xea, 0xad, 0xc9, 0x28, 0x0a, 0xfd, 0x60, 0x4f, 0xff,
+	0x31, 0xd8, 0xb5, 0xa4, 0x6c, 0xd3, 0x68, 0x55, 0x73, 0xd2, 0x15, 0xb8, 0x52, 0x46, 0x53, 0x10,
+	0x47, 0xe3, 0xff, 0x2e, 0x6d, 0x0b, 0xe6, 0x3f, 0x02, 0x98, 0x5c, 0x1b, 0x6d, 0x6d, 0xa9, 0xea,
+	0x8d, 0x78, 0x00, 0x63, 0x2b, 0xd1, 0xe4, 0xdd, 0xb4, 0x6d, 0x20, 0xce, 0x60, 0xda, 0xa0, 0xa1,
+	0x9a, 0x5b, 0xff, 0x23, 0xef, 0x1f, 0x5a, 0xe4, 0xad, 0x9f, 0xc1, 0xd4, 0x32, 0x1a, 0x5e, 0x53,
+	0xa3, 0x33, 0xe9, 0x07, 0x0c, 0x13, 0xf0, 0x68, 0xe5, 0x88, 0x78, 0x04, 0x13, 0xaa, 0xf3, 0x2e,
+	0x1d, 0xfa, 0xf4, 0x31, 0xd5, 0xf9, 0x3e, 0xe9, 0x76, 0xd3, 0x8a, 0x8f, 0xbd, 0xf8, 0xb1, 0x03,
+	0x4e, 0x7a, 0x7e, 0x05, 0xd0, 0xbb, 0x76, 0xfe, 0x5a, 0x8d, 0xce, 0x9f, 0x0f, 0xdc, 0x8a, 0x06,
+	0xc6, 0xfc, 0x79, 0xf9, 0x3d, 0x80, 0x87, 0xda, 0x14, 0x87, 0x3f, 0xc4, 0xf2, 0x64, 0xb0, 0xe5,
+	0x1b, 0xf7, 0x4c, 0x6f, 0x82, 0x4f, 0x57, 0x85, 0x62, 0xb9, 0x4d, 0xe3, 0x4c, 0x57, 0x8b, 0xc6,
+	0x7c, 0xb5, 0x15, 0xb2, 0xca, 0x4a, 0x4c, 0xed, 0x62, 0xa7, 0x81, 0x8d, 0xf2, 0xc1, 0xfe, 0xb9,
+	0xbf, 0x23, 0x96, 0x3f, 0x47, 0xa7, 0xab, 0x5d, 0x8f, 0xd5, 0xa0, 0xc7, 0xaf, 0x9e, 0xdf, 0xae,
+	0x58, 0xde, 0xee, 0x78, 0x7a, 0xe4, 0xff, 0x8b, 0xd7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x20,
+	0x22, 0x76, 0x76, 0x39, 0x03, 0x00, 0x00,
 }
diff --git a/eth/v1alpha1/attestation.proto b/eth/v1alpha1/attestation.proto
index 8453ef9..f0e3a37 100644
--- a/eth/v1alpha1/attestation.proto
+++ b/eth/v1alpha1/attestation.proto
@@ -29,13 +29,8 @@ message Attestation {
 
   AttestationData data = 2;
 
-  // Custody bits is used for proof of custody game to ensure validator has
-  // legitimately downloaded and verified shard data.
-  // Not used in phase 0.
-  bytes custody_bits = 3;
-
   // 96 byte BLS aggregate signature.
-  bytes signature = 4;
+  bytes signature = 3;
 }
 
 message AttestationData {
diff --git a/eth/v1alpha1/beacon_block.pb.go b/eth/v1alpha1/beacon_block.pb.go
index 3e452fe..40f2b62 100644
--- a/eth/v1alpha1/beacon_block.pb.go
+++ b/eth/v1alpha1/beacon_block.pb.go
@@ -580,10 +580,9 @@ func (m *BeaconBlockHeader) GetSignature() []byte {
 }
 
 type IndexedAttestation struct {
-	CustodyBit_0Indices  []uint64         `protobuf:"varint,1,rep,packed,name=custody_bit_0_indices,json=custodyBit0Indices,proto3" json:"custody_bit_0_indices,omitempty"`
-	CustodyBit_1Indices  []uint64         `protobuf:"varint,2,rep,packed,name=custody_bit_1_indices,json=custodyBit1Indices,proto3" json:"custody_bit_1_indices,omitempty"`
-	Data                 *AttestationData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
-	Signature            []byte           `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
+	AttestingIndices     []uint64         `protobuf:"varint,1,rep,packed,name=attesting_indices,json=attestingIndices,proto3" json:"attesting_indices,omitempty"`
+	Data                 *AttestationData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
+	Signature            []byte           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
 	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
 	XXX_unrecognized     []byte           `json:"-"`
 	XXX_sizecache        int32            `json:"-"`
@@ -614,16 +613,9 @@ func (m *IndexedAttestation) XXX_DiscardUnknown() {
 
 var xxx_messageInfo_IndexedAttestation proto.InternalMessageInfo
 
-func (m *IndexedAttestation) GetCustodyBit_0Indices() []uint64 {
+func (m *IndexedAttestation) GetAttestingIndices() []uint64 {
 	if m != nil {
-		return m.CustodyBit_0Indices
-	}
-	return nil
-}
-
-func (m *IndexedAttestation) GetCustodyBit_1Indices() []uint64 {
-	if m != nil {
-		return m.CustodyBit_1Indices
+		return m.AttestingIndices
 	}
 	return nil
 }
@@ -658,60 +650,59 @@ func init() {
 func init() { proto.RegisterFile("eth/v1alpha1/beacon_block.proto", fileDescriptor_6abbd9d98bd3d11a) }
 
 var fileDescriptor_6abbd9d98bd3d11a = []byte{
-	// 868 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0x23, 0x35,
-	0x14, 0xd6, 0x34, 0xd3, 0x36, 0x79, 0x49, 0xda, 0xae, 0x45, 0x57, 0xa1, 0xd0, 0x6d, 0x48, 0x81,
-	0x0d, 0x97, 0x74, 0x67, 0x10, 0x20, 0x15, 0x2e, 0xa4, 0x1b, 0xb4, 0x2b, 0x04, 0xaa, 0x06, 0x69,
-	0x0f, 0x68, 0xa5, 0x91, 0x67, 0xc6, 0x8d, 0xad, 0x9d, 0x8e, 0x07, 0xdb, 0xc9, 0x36, 0x7f, 0x03,
-	0x0e, 0xdc, 0x39, 0x72, 0xe4, 0xca, 0x91, 0x1b, 0x67, 0xfe, 0x06, 0xff, 0x01, 0x8d, 0xed, 0x49,
-	0x26, 0xb3, 0x9b, 0x20, 0xad, 0xb4, 0xb7, 0xf1, 0xf7, 0xfc, 0x7d, 0xcf, 0xcf, 0xfe, 0xfc, 0x3c,
-	0x70, 0x46, 0x14, 0xbd, 0x98, 0x7b, 0x38, 0xcd, 0x29, 0xf6, 0x2e, 0x22, 0x82, 0x63, 0x9e, 0x85,
-	0x51, 0xca, 0xe3, 0x17, 0xa3, 0x5c, 0x70, 0xc5, 0xd1, 0x31, 0x51, 0x94, 0x08, 0x32, 0xbb, 0x1d,
-	0x11, 0x45, 0x47, 0xe5, 0xcc, 0x93, 0x07, 0x6b, 0x3c, 0xac, 0x14, 0x91, 0x0a, 0x2b, 0xc6, 0x33,
-	0x43, 0x1b, 0xfc, 0xe9, 0x40, 0x7b, 0xac, 0xd5, 0xc6, 0x85, 0x18, 0x42, 0xe0, 0xca, 0x94, 0xab,
-	0x9e, 0xd3, 0x77, 0x86, 0x6e, 0xa0, 0xbf, 0xd1, 0x19, 0xb4, 0x73, 0x2c, 0x48, 0xa6, 0x42, 0xc1,
-	0xb9, 0xea, 0xed, 0xf4, 0x9d, 0x61, 0x27, 0x00, 0x03, 0x05, 0x9c, 0x2b, 0x74, 0x0a, 0x50, 0xa8,
-	0x12, 0x13, 0x6f, 0xe8, 0x78, 0x4b, 0x23, 0x3a, 0x7c, 0x09, 0x6e, 0xc4, 0x93, 0x45, 0xcf, 0xed,
-	0x3b, 0xc3, 0xb6, 0xff, 0xf1, 0xe8, 0xb5, 0x2b, 0x1d, 0x55, 0x56, 0x31, 0xe6, 0xc9, 0x22, 0xd0,
-	0x1c, 0xf4, 0x3e, 0xb4, 0x24, 0x9b, 0x66, 0x58, 0xcd, 0x04, 0xe9, 0xed, 0x5a, 0xe5, 0x12, 0x18,
-	0xfc, 0xe2, 0xc2, 0x61, 0x8d, 0x87, 0xce, 0xa1, 0x2b, 0x70, 0x96, 0x60, 0x1e, 0x0a, 0x32, 0x27,
-	0x38, 0xd5, 0xa5, 0x74, 0x82, 0x8e, 0x01, 0x03, 0x8d, 0xa1, 0xaf, 0xa0, 0x45, 0x14, 0xf5, 0xc2,
-	0x04, 0x2b, 0xac, 0x0b, 0x6a, 0xfb, 0x67, 0x1b, 0xd6, 0x35, 0x51, 0xd4, 0x7b, 0x8c, 0x15, 0x0e,
-	0x9a, 0xc4, 0x7e, 0xa1, 0x13, 0x68, 0x4e, 0x05, 0xbe, 0xb9, 0x61, 0x8a, 0xd9, 0x6a, 0x97, 0x63,
-	0xf4, 0x0c, 0x50, 0x2e, 0x78, 0xce, 0x25, 0x11, 0xa1, 0x4c, 0xb1, 0xa4, 0x2c, 0x9b, 0xca, 0x9e,
-	0xdb, 0x6f, 0x0c, 0xdb, 0xfe, 0xc3, 0x0d, 0x29, 0xae, 0x2d, 0xe1, 0x07, 0x3b, 0x3f, 0xb8, 0x97,
-	0xd7, 0x10, 0x59, 0xe8, 0x9a, 0xd3, 0x5b, 0xd3, 0xdd, 0xdd, 0xaa, 0xfb, 0xb5, 0x25, 0xac, 0x74,
-	0x71, 0x0d, 0x91, 0xe8, 0x1b, 0xe8, 0x54, 0x5c, 0x21, 0x7b, 0x7b, 0x5a, 0x71, 0xb0, 0x55, 0x51,
-	0x4f, 0x0d, 0xd6, 0x78, 0xe8, 0x12, 0x9a, 0x09, 0xc9, 0xb9, 0x64, 0x4a, 0xf6, 0xf6, 0xb5, 0xc6,
-	0x83, 0x0d, 0x1a, 0x8f, 0xcd, 0xb4, 0x60, 0x39, 0x1f, 0x7d, 0x07, 0x87, 0x73, 0x9e, 0xce, 0x32,
-	0x85, 0xc5, 0x22, 0x24, 0x77, 0x85, 0x44, 0x53, 0x4b, 0x7c, 0xb8, 0x41, 0xe2, 0x59, 0x39, 0x7b,
-	0x72, 0xc7, 0x54, 0x70, 0x30, 0xaf, 0x0e, 0xe5, 0xe0, 0x2f, 0x07, 0x8e, 0xea, 0x5b, 0x8a, 0x3e,
-	0x82, 0x83, 0xe5, 0xb9, 0xb0, 0x2c, 0x21, 0x77, 0xd6, 0xe2, 0xdd, 0x12, 0x7d, 0x5a, 0x80, 0xe8,
-	0x0a, 0x9a, 0x94, 0xe0, 0x84, 0x88, 0xd0, 0xb3, 0xbe, 0x18, 0xfe, 0xbf, 0x5f, 0x9f, 0x68, 0x46,
-	0xb0, 0x6f, 0x98, 0x5e, 0x45, 0xc4, 0xd7, 0xfe, 0x78, 0x03, 0x11, 0x7f, 0xf0, 0x87, 0x03, 0x47,
-	0xf5, 0x03, 0x44, 0xdf, 0x43, 0xb7, 0xb2, 0xeb, 0xa1, 0xa7, 0x8b, 0x68, 0xfb, 0x9f, 0x6c, 0x90,
-	0xd7, 0x35, 0x91, 0x64, 0xd3, 0xa9, 0x79, 0x75, 0x3d, 0xdf, 0xd6, 0xfc, 0x86, 0x7a, 0xfe, 0xe0,
-	0x5f, 0x07, 0xf6, 0xed, 0xf9, 0xa2, 0x77, 0x60, 0x37, 0x17, 0x9c, 0xdf, 0xf4, 0x9c, 0x7e, 0x63,
-	0xd8, 0x09, 0xcc, 0x00, 0x7d, 0x01, 0x6e, 0xe5, 0xd2, 0x9d, 0x6f, 0xf7, 0xc8, 0x48, 0x5f, 0x3c,
-	0x4d, 0x38, 0xf9, 0xd9, 0x01, 0x57, 0xdf, 0xbe, 0x53, 0x80, 0x7c, 0x16, 0xa5, 0x2c, 0x0e, 0x5f,
-	0x90, 0x85, 0xbd, 0xdd, 0x2d, 0x83, 0x7c, 0x4b, 0x16, 0xe8, 0x33, 0xb8, 0xff, 0x92, 0x29, 0x9a,
-	0x08, 0xfc, 0x12, 0xa7, 0x61, 0x2c, 0x48, 0x42, 0x32, 0xc5, 0x70, 0x2a, 0x6d, 0xe3, 0x3a, 0x5e,
-	0x45, 0xaf, 0x56, 0x41, 0x74, 0x1f, 0xf6, 0xf0, 0x2d, 0x9f, 0x65, 0xa6, 0x7f, 0xb9, 0x81, 0x1d,
-	0xad, 0x37, 0x20, 0xb7, 0xde, 0x80, 0x52, 0xe8, 0xae, 0x79, 0xb1, 0x28, 0x9a, 0xe4, 0x3c, 0xa6,
-	0xd6, 0x5d, 0x66, 0x80, 0x1e, 0xc2, 0xe1, 0x1c, 0xa7, 0x2c, 0xc1, 0x8a, 0x97, 0xee, 0xdb, 0xd1,
-	0xf1, 0x83, 0x25, 0x6c, 0xec, 0xb7, 0x96, 0xad, 0x51, 0xcf, 0xf6, 0x13, 0x34, 0xcb, 0x6e, 0x84,
-	0x3e, 0x80, 0x8e, 0xbd, 0x3f, 0xa6, 0xeb, 0x9a, 0x7d, 0x68, 0x5b, 0x4c, 0xf7, 0xdd, 0x73, 0xe8,
-	0x96, 0x53, 0x62, 0x5d, 0x99, 0xc9, 0x59, 0xf2, 0xae, 0x74, 0x7d, 0xa7, 0x00, 0xfa, 0x19, 0x09,
-	0x29, 0x96, 0xb4, 0x4c, 0xa9, 0x91, 0x27, 0x58, 0xd2, 0xc1, 0x6f, 0x0e, 0xdc, 0x7b, 0xc5, 0xa4,
-	0x6f, 0xe5, 0x95, 0x78, 0x0f, 0x5a, 0x45, 0xc7, 0x37, 0x51, 0xb3, 0xd1, 0xcd, 0x02, 0xd0, 0xc1,
-	0xed, 0xcf, 0xc0, 0x3f, 0x0e, 0xa0, 0x57, 0xad, 0x89, 0x3c, 0x38, 0x8e, 0x67, 0x52, 0x15, 0xa2,
-	0x11, 0x53, 0xe1, 0xa3, 0x62, 0xe7, 0x59, 0x4c, 0xa4, 0x36, 0xa4, 0x1b, 0x20, 0x1b, 0x1c, 0x33,
-	0xf5, 0xe8, 0xa9, 0x89, 0xd4, 0x29, 0xde, 0x92, 0xb2, 0x53, 0xa7, 0x78, 0x25, 0xe5, 0xd2, 0x1a,
-	0xba, 0xb1, 0xf5, 0x75, 0xab, 0xac, 0x6b, 0xe5, 0xe9, 0xed, 0xe6, 0x1a, 0xff, 0xea, 0xc0, 0xbb,
-	0x5c, 0x4c, 0x5f, 0xaf, 0x38, 0x3e, 0xaa, 0x1c, 0xcb, 0x75, 0xf1, 0x96, 0x5f, 0x3b, 0x3f, 0x7e,
-	0x3e, 0x65, 0x8a, 0xce, 0xa2, 0x51, 0xcc, 0x6f, 0x2f, 0x72, 0xb1, 0x90, 0xb7, 0x58, 0xb1, 0x38,
-	0xc5, 0x91, 0xbc, 0x28, 0x35, 0x70, 0xce, 0xf4, 0x60, 0xf9, 0x4f, 0xf0, 0x25, 0x51, 0xf4, 0xf7,
-	0x9d, 0xe3, 0x49, 0x99, 0x63, 0x52, 0xc9, 0xf1, 0xf7, 0x0a, 0x7f, 0x3e, 0x51, 0xf4, 0x79, 0x89,
-	0x47, 0x7b, 0xfa, 0xe7, 0xe1, 0xd3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xa2, 0xc9, 0xc5,
-	0x96, 0x08, 0x00, 0x00,
+	// 851 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0xe3, 0x44,
+	0x14, 0x96, 0x5b, 0xb7, 0x4d, 0x5e, 0x92, 0xb6, 0x3b, 0xa2, 0x2b, 0x53, 0xe8, 0x36, 0xa4, 0xb0,
+	0x1b, 0x84, 0x94, 0xca, 0x46, 0x80, 0xb4, 0x70, 0x21, 0xdd, 0xa0, 0x5d, 0x21, 0x50, 0x65, 0xa4,
+	0x3d, 0xa0, 0x95, 0xac, 0x89, 0x3d, 0xcd, 0x8c, 0xd6, 0xf1, 0x98, 0x99, 0x49, 0xb6, 0xf9, 0x1b,
+	0x70, 0xe0, 0xc0, 0x8d, 0x23, 0x47, 0xae, 0x1c, 0xb9, 0xf1, 0x5f, 0xf8, 0x0f, 0xc8, 0x33, 0xe3,
+	0xc4, 0xf1, 0x6e, 0xb2, 0x52, 0x25, 0x6e, 0x99, 0xef, 0xbd, 0xf7, 0x3d, 0xbf, 0x79, 0xdf, 0xbc,
+	0x17, 0x38, 0x27, 0x8a, 0x5e, 0xce, 0x7d, 0x9c, 0xe6, 0x14, 0xfb, 0x97, 0x63, 0x82, 0x63, 0x9e,
+	0x45, 0xe3, 0x94, 0xc7, 0x2f, 0x07, 0xb9, 0xe0, 0x8a, 0xa3, 0x13, 0xa2, 0x28, 0x11, 0x64, 0x36,
+	0x1d, 0x10, 0x45, 0x07, 0xa5, 0xe7, 0xe9, 0x83, 0xb5, 0x38, 0xac, 0x14, 0x91, 0x0a, 0x2b, 0xc6,
+	0x33, 0x13, 0xd6, 0xfb, 0xcb, 0x81, 0xd6, 0x50, 0xb3, 0x0d, 0x0b, 0x32, 0x84, 0xc0, 0x95, 0x29,
+	0x57, 0x9e, 0xd3, 0x75, 0xfa, 0x6e, 0xa8, 0x7f, 0xa3, 0x73, 0x68, 0xe5, 0x58, 0x90, 0x4c, 0x45,
+	0x82, 0x73, 0xe5, 0xed, 0x74, 0x9d, 0x7e, 0x3b, 0x04, 0x03, 0x85, 0x9c, 0x2b, 0x74, 0x06, 0x50,
+	0xb0, 0x12, 0x63, 0xdf, 0xd5, 0xf6, 0xa6, 0x46, 0xb4, 0xf9, 0x31, 0xb8, 0x63, 0x9e, 0x2c, 0x3c,
+	0xb7, 0xeb, 0xf4, 0x5b, 0xc1, 0xc3, 0xc1, 0x1b, 0xbf, 0x74, 0x50, 0xf9, 0x8a, 0x21, 0x4f, 0x16,
+	0xa1, 0x8e, 0x41, 0xef, 0x43, 0x53, 0xb2, 0x49, 0x86, 0xd5, 0x4c, 0x10, 0x6f, 0xcf, 0x32, 0x97,
+	0x40, 0xef, 0x17, 0x17, 0x8e, 0x6a, 0x71, 0xe8, 0x02, 0x3a, 0x02, 0x67, 0x09, 0xe6, 0x91, 0x20,
+	0x73, 0x82, 0x53, 0x5d, 0x4a, 0x3b, 0x6c, 0x1b, 0x30, 0xd4, 0x18, 0xfa, 0x0a, 0x9a, 0x44, 0x51,
+	0x3f, 0x4a, 0xb0, 0xc2, 0xba, 0xa0, 0x56, 0x70, 0xbe, 0xe1, 0xbb, 0x46, 0x8a, 0xfa, 0x4f, 0xb0,
+	0xc2, 0x61, 0x83, 0xd8, 0x5f, 0xe8, 0x14, 0x1a, 0x13, 0x81, 0x6f, 0x6e, 0x98, 0x62, 0xb6, 0xda,
+	0xe5, 0x19, 0x3d, 0x07, 0x94, 0x0b, 0x9e, 0x73, 0x49, 0x44, 0x24, 0x53, 0x2c, 0x29, 0xcb, 0x26,
+	0xd2, 0x73, 0xbb, 0xbb, 0xfd, 0x56, 0xf0, 0x68, 0x43, 0x8a, 0x6b, 0x1b, 0xf0, 0x83, 0xf5, 0x0f,
+	0xef, 0xe5, 0x35, 0x44, 0x16, 0xbc, 0xa6, 0x7b, 0x6b, 0xbc, 0x7b, 0x5b, 0x79, 0xbf, 0xb6, 0x01,
+	0x2b, 0x5e, 0x5c, 0x43, 0x24, 0xfa, 0x06, 0xda, 0x15, 0x55, 0x48, 0x6f, 0x5f, 0x33, 0xf6, 0xb6,
+	0x32, 0x6a, 0xd7, 0x70, 0x2d, 0x0e, 0x3d, 0x86, 0x46, 0x42, 0x72, 0x2e, 0x99, 0x92, 0xde, 0x81,
+	0xe6, 0x78, 0xb0, 0x81, 0xe3, 0x89, 0x71, 0x0b, 0x97, 0xfe, 0xe8, 0x3b, 0x38, 0x9a, 0xf3, 0x74,
+	0x96, 0x29, 0x2c, 0x16, 0x11, 0xb9, 0x2d, 0x28, 0x1a, 0x9a, 0xe2, 0xc3, 0x0d, 0x14, 0xcf, 0x4b,
+	0xef, 0xd1, 0x2d, 0x53, 0xe1, 0xe1, 0xbc, 0x7a, 0x94, 0xbd, 0xbf, 0x1d, 0x38, 0xae, 0x5f, 0x29,
+	0xfa, 0x08, 0x0e, 0x97, 0x7d, 0x61, 0x59, 0x42, 0x6e, 0xad, 0xc4, 0x3b, 0x25, 0xfa, 0xac, 0x00,
+	0xd1, 0x15, 0x34, 0x28, 0xc1, 0x09, 0x11, 0x91, 0x6f, 0x75, 0xd1, 0x7f, 0xbb, 0x5e, 0x9f, 0xea,
+	0x88, 0xf0, 0xc0, 0x44, 0xfa, 0x15, 0x92, 0x40, 0xeb, 0xe3, 0x0e, 0x24, 0x41, 0xef, 0x4f, 0x07,
+	0x8e, 0xeb, 0x0d, 0x44, 0xdf, 0x43, 0xa7, 0x72, 0xeb, 0x91, 0xaf, 0x8b, 0x68, 0x05, 0x1f, 0x6f,
+	0xa0, 0xd7, 0x35, 0x91, 0x64, 0x53, 0xd7, 0xfc, 0x3a, 0x5f, 0x60, 0x6b, 0xbe, 0x23, 0x5f, 0xd0,
+	0xfb, 0xd7, 0x81, 0x03, 0xdb, 0x5f, 0xf4, 0x0e, 0xec, 0xe5, 0x82, 0xf3, 0x1b, 0xcf, 0xe9, 0xee,
+	0xf6, 0xdb, 0xa1, 0x39, 0xa0, 0x2f, 0xc0, 0xad, 0x3c, 0xba, 0x8b, 0xed, 0x1a, 0x19, 0xe8, 0x87,
+	0xa7, 0x03, 0x4e, 0x7f, 0x76, 0xc0, 0xd5, 0xaf, 0xef, 0x0c, 0x20, 0x9f, 0x8d, 0x53, 0x16, 0x47,
+	0x2f, 0xc9, 0xc2, 0xbe, 0xee, 0xa6, 0x41, 0xbe, 0x25, 0x0b, 0xf4, 0x19, 0xdc, 0x7f, 0xc5, 0x14,
+	0x4d, 0x04, 0x7e, 0x85, 0xd3, 0x28, 0x16, 0x24, 0x21, 0x99, 0x62, 0x38, 0x95, 0x76, 0x70, 0x9d,
+	0xac, 0xac, 0x57, 0x2b, 0x23, 0xba, 0x0f, 0xfb, 0x78, 0xca, 0x67, 0x99, 0x99, 0x5f, 0x6e, 0x68,
+	0x4f, 0xeb, 0x03, 0xc8, 0xad, 0x0f, 0xa0, 0x14, 0x3a, 0x6b, 0x5a, 0x2c, 0x8a, 0x26, 0x39, 0x8f,
+	0xa9, 0x55, 0x97, 0x39, 0xa0, 0x47, 0x70, 0x34, 0xc7, 0x29, 0x4b, 0xb0, 0xe2, 0xa5, 0xfa, 0x76,
+	0xb4, 0xfd, 0x70, 0x09, 0x1b, 0xf9, 0xad, 0x65, 0xdb, 0xad, 0x67, 0xfb, 0x09, 0x1a, 0xe5, 0x34,
+	0x42, 0x1f, 0x40, 0xdb, 0xbe, 0x1f, 0x33, 0x75, 0xcd, 0x3d, 0xb4, 0x2c, 0xa6, 0xe7, 0xee, 0x05,
+	0x74, 0x4a, 0x97, 0x58, 0x57, 0x66, 0x72, 0x96, 0x71, 0x57, 0xba, 0xbe, 0x33, 0x00, 0xbd, 0x46,
+	0x22, 0x8a, 0x25, 0x2d, 0x53, 0x6a, 0xe4, 0x29, 0x96, 0xb4, 0xf7, 0xbb, 0x03, 0xf7, 0x5e, 0x13,
+	0xe9, 0xff, 0xb2, 0x25, 0xde, 0x83, 0x66, 0x31, 0xf1, 0x8d, 0xd5, 0x5c, 0x74, 0xa3, 0x00, 0xb4,
+	0x71, 0xfb, 0x1a, 0xf8, 0xcd, 0x01, 0xf4, 0xba, 0x34, 0xd1, 0x27, 0x60, 0xe7, 0x1d, 0xcb, 0x26,
+	0xc5, 0xad, 0xb3, 0x98, 0x48, 0x2d, 0x46, 0x37, 0x3c, 0x5e, 0x1a, 0x9e, 0x19, 0xbc, 0x58, 0x52,
+	0x15, 0x5d, 0x3e, 0x7c, 0xfb, 0xfc, 0x5b, 0x49, 0x73, 0x7b, 0xd7, 0x86, 0xbf, 0x3a, 0xf0, 0x2e,
+	0x17, 0x93, 0x37, 0x33, 0x0e, 0x8f, 0x2b, 0xb7, 0x7b, 0x5d, 0xac, 0xe4, 0x6b, 0xe7, 0xc7, 0xcf,
+	0x27, 0x4c, 0xd1, 0xd9, 0x78, 0x10, 0xf3, 0xe9, 0x65, 0x2e, 0x16, 0x72, 0x8a, 0x15, 0x8b, 0x53,
+	0x3c, 0x96, 0x97, 0x25, 0x07, 0xce, 0x99, 0x3e, 0x2c, 0x57, 0xfb, 0x97, 0x44, 0xd1, 0x3f, 0x76,
+	0x4e, 0x46, 0x65, 0x8e, 0x51, 0x25, 0xc7, 0x3f, 0x2b, 0xfc, 0xc5, 0x48, 0xd1, 0x17, 0x25, 0x3e,
+	0xde, 0xd7, 0xff, 0x01, 0x3e, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xfd, 0xb4, 0x08, 0x5d,
+	0x08, 0x00, 0x00,
 }
diff --git a/eth/v1alpha1/beacon_block.proto b/eth/v1alpha1/beacon_block.proto
index 69a148a..7cc5f04 100644
--- a/eth/v1alpha1/beacon_block.proto
+++ b/eth/v1alpha1/beacon_block.proto
@@ -168,11 +168,10 @@ message BeaconBlockHeader {
 }
 
 message IndexedAttestation {
-    repeated uint64 custody_bit_0_indices = 1;
-    repeated uint64 custody_bit_1_indices = 2;
+    repeated uint64 attesting_indices = 1;
 
-    AttestationData data = 3;
+    AttestationData data = 2;
 
     // 96 bytes aggregate signature.
-    bytes signature = 4;
+    bytes signature = 3;
 }
diff --git a/eth/v1alpha1/beacon_chain.proto b/eth/v1alpha1/beacon_chain.proto
index 00db5f3..0f490c1 100644
--- a/eth/v1alpha1/beacon_chain.proto
+++ b/eth/v1alpha1/beacon_chain.proto
@@ -40,7 +40,8 @@ service BeaconChain {
     // 
     // The server may return an empty list when no attestations match the given 
     // filter criteria. This RPC should not return NOT_FOUND. Only one filter 
-    // criteria should be used.
+    // criteria should be used. This endpoint allows for retrieval of genesis
+    // information via a boolean query filter.
     rpc ListAttestations(ListAttestationsRequest) returns (ListAttestationsResponse) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/beacon/attestations"
@@ -67,7 +68,8 @@ service BeaconChain {
     // The server may return multiple blocks in the case that a slot or epoch is
     // provided as the filter criteria. The server may return an empty list when
     // no blocks in their database match the filter criteria. This RPC should 
-    // not return NOT_FOUND. Only one filter criteria should be used.
+    // not return NOT_FOUND. Only one filter criteria should be used. This endpoint
+    // allows for retrieval of genesis information via a boolean query filter.
     rpc ListBlocks(ListBlocksRequest) returns (ListBlocksResponse) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/beacon/blocks"
@@ -89,6 +91,7 @@ service BeaconChain {
     //
     // If no filter criteria is specified, the response returns
     // all beacon committees for the current epoch. The results are paginated by default.
+    // This endpoint allows for retrieval of genesis information via a boolean query filter.
     rpc ListBeaconCommittees(ListCommitteesRequest) returns (BeaconCommittees) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/beacon/committees"
@@ -96,7 +99,8 @@ service BeaconChain {
     }
 
     // Retrieve validator balances for a given set of public keys at a specific 
-    // epoch in time.
+    // epoch in time. This endpoint allows for retrieval of genesis information
+    // via a boolean query filter.
     rpc ListValidatorBalances(ListValidatorBalancesRequest) returns (ValidatorBalances) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/validators/balances"
@@ -106,7 +110,8 @@ service BeaconChain {
     // Retrieve the current validator registry.
     //
     // The request may include an optional historical epoch to retrieve a 
-    // specific validator set in time.
+    // specific validator set in time. This endpoint allows for retrieval of genesis
+    // information via a boolean query filter.
     rpc ListValidators(ListValidatorsRequest) returns (Validators) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/validators"
@@ -116,7 +121,8 @@ service BeaconChain {
     // Retrieve the active set changes for a given epoch. 
     // 
     // This data includes any activations, voluntary exits, and involuntary
-    // ejections.
+    // ejections. This endpoint allows for retrieval of genesis
+    // information via a boolean query filter.
     rpc GetValidatorActiveSetChanges(GetValidatorActiveSetChangesRequest) returns (ActiveSetChanges) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/validators/activesetchanges"
@@ -133,7 +139,8 @@ service BeaconChain {
     // Retrieve the validator assignments for a given epoch.
     //
     // This request may specify optional validator indices or public keys to
-    // filter validator assignments.
+    // filter validator assignments. This endpoint allows for retrieval of genesis
+    // information via a boolean query filter.
     rpc ListValidatorAssignments(ListValidatorAssignmentsRequest) returns (ValidatorAssignments) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/validators/assignments"
@@ -143,7 +150,8 @@ service BeaconChain {
     // Retrieve the validator participation information for a given epoch.
     //
     // This method returns information about the global participation of 
-    // validator attestations.
+    // validator attestations. This endpoint allows for retrieval of genesis
+    // information via a boolean query filter.
     rpc GetValidatorParticipation(GetValidatorParticipationRequest) returns (ValidatorParticipationResponse) {
         option (google.api.http) = {
             get: "/eth/v1alpha1/validators/participation"
@@ -170,16 +178,19 @@ message ListAttestationsRequest {
 
         // Filter attestations by target root.
         bytes target_root = 5;
+
+        // Optional criteria to retrieve genesis attestations.
+        bool genesis = 6;
     }
 
     // The maximum number of Attestations to return in the response.
     // This field is optional.
-    int32 page_size = 6;
+    int32 page_size = 7;
 
     // A pagination token returned from a previous call to `ListAttestations`
     // that indicates where this listing should continue from.
     // This field is optional.
-    string page_token = 7;
+    string page_token = 8;
 }
 
 message ListAttestationsResponse {
@@ -208,20 +219,23 @@ message ListBlocksRequest {
         // slot if the epoch has not been finalized and the node has seen blocks
         // from another fork.
         uint64 epoch = 3;
+
+        // Optional criteria to retrieve genesis block.
+        bool genesis = 4;
     }
 
     // Optional criteria to include any non-canonical blocks matching the 
     // request.
-    bool include_noncanonical = 4;
+    bool include_noncanonical = 5;
         
     // The maximum number of Blocks to return in the response.
     // This field is optional.
-    int32 page_size = 5;
+    int32 page_size = 6;
 
     // A pagination token returned from a previous call to `ListBlocks`
     // that indicates where this listing should continue from.
     // This field is optional.
-    string page_token = 6;
+    string page_token = 7;
 }
 
 message ListBlocksResponse {
